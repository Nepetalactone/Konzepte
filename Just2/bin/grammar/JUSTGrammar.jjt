/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(JUSTParser)package grammar;import grammar.symbol.*;import grammar.codegen.*;public class JUSTParser{  private static SymbolTable m_symboltable = new SymbolTable(); //Semantikanschluss Seite 41
  private static CodeGenerator m_codeGen = new CodeGenerator();  public static void main(String args [])  {    System.out.println("Reading from standard input...");    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");    new JUSTParser(System.in);    try    {      SimpleNode n = JUSTParser.Start();      n.dump("");      System.out.println("Thank you.");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(JUSTParser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* OPERATORS */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >| < ASSIGN : "=" >| < EQUALS : "==" >| < NQ : "!=" > /*Not Equals*/| < GT : ">" > /*Greater than*/| < GET : ">=" > /*Greater than or equal*/| < LT : "<" > /*Lesser than*/| < LET : "<=" > /*Lesser than or equal*/| < NOT : "!" >| < OR : "||" >| < AND : "&&" >}TOKEN : /*punctuation character*/{  < LEFTBRACKET : "(" >| < RIGHTBRACKET : ")" >| < LEFTCURLYBRACKET : "{" >| < RIGHTTCURLYBRACKET : "}" >| < LEFTSQUAREBRACKET : "[" >| < RIGHTSQUAREBRACKET : "]" >| < COLON : "," >| < SEMICOLON : ";" >}TOKEN [ IGNORE_CASE ] : /*keywords*/{  < PROGRAM : "program" >| < VOID : "void" >| < INT : "int" >| < BOOL : "boolean" >| < BYREF : "byref" >| < RETURN : "return" >| < IF : "if" >| < ELSE : "else" >| < WHILE : "while" >}TOKEN [ IGNORE_CASE ] :{  < #DIGIT : [ "0"-"9" ] >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < CONSTANT : (< DIGIT >)+ >| < IDENT :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >}TOKEN :{  < TrueValue : "true" >| < FalseValue : "false" >}SimpleNode Start() :{}{  CompilationUnit() /*Startpunkt für die Kompilierung*/  {    return jjtThis;  }}int one_line() :{}{  CompilationUnit() /*Startpunkt für die Kompilierung*/  {    return 0;  }| ";"  {    return 1;  }}/*Ab hier einfach die Regeln aus den Folien Abschreiben:
CompilationUnit ="program" ident "{" Definition "}".
Definition={ VarDef| FuncDef}.
VarDef=Type ident[ Init] ";".
Init="=" number.
Type="void" | "int" | "boolean".
FuncDef=FuncHeadBlock.
FuncHead=Type ident "(" [ FormParList] ")".
FormParList=["byref"] Type ident{"," ["byref"] Type ident}.
Block="{" { VarDef| Stat} "}".
Stat=AssignStat| CallStat| IfStat| WhileStat| ReturnStat| Block | ";".


AssignStat=ident "=" Expr";".
CallStat=Call ";".
Call=ident "(" [ ActParList] ")".
ActParList=Expr{ "," Expr}.
IfStat="if" "(" Expr ")" Stat [ "else" Stat ].
WhileStat="while" "(" Expr")" Stat.
ReturnStat="return" [ Expr] ";" .
Expr=OrExpr.
OrExpr=AndExpr{ "||" AndExpr}.
AndExpr=RelExpr{ "&&" RelExpr}.
RelExpr=SimpleExpr[ ("==" | "!=" | "<" | "<=" | ">" | ">=") SimpleExpr].
SimpleExpr=["+" | "-"] Term { ("+" | "-") Term }.
Term=NotFact{ ("*" | "/") NotFact}.
NotFact=["!"] Fact.
Fact=number| ident["(" [ ActParList] ")" ]| "(" Expr")".*/void CompilationUnit() :{}{  < PROGRAM > < IDENT > < LEFTCURLYBRACKET > Definition() < RIGHTTCURLYBRACKET >}void Definition() :{}{  (    LOOKAHEAD(3) /*vorrausschauen 3 ist vorschlag von cc*/    VarDef()  | FuncDef()  )*}void VarDef() :{}{  Type() < IDENT > [ Init() ] < SEMICOLON >}void FuncDef() :{}{  FuncHead() Block()}void Type() :{}{  < VOID >| < INT >| < BOOL >}void Block() :{}{  < LEFTCURLYBRACKET >  (    VarDef()  | Stat()  )//*//not sure if ok, brings error with *  < RIGHTTCURLYBRACKET >}void Stat() :{}{  LOOKAHEAD(2) /*vorraussschauen (Vorschlag war 2)*/  AssignStat()| CallStat()| IfStat()| WhileStat()| ReturnStat()| Block()| < SEMICOLON >}void AssignStat() :{  //Seite 41
  //Attribute  Token token;  boolean isArray = false;  Symbol symbol;}{  token = < IDENT >  {    //Semantische Aktionen (41) und Codegenerierung (51)    symbol = m_symboltable.lookup(token.image); //symbol.kind = Arg | Local | Field
    Descriptor desc = m_codeGen.newDescriptor(symbol); //desc.kind = Arg | Local | Field
    m_codeGen.load(desc); //desc.kind = Stack  }  [    {      isArray = true;      m_codeGen.emit2(Opcode.ALOAD, symbol.adr);    }    "[" Expr() "]"  ]  < ASSIGN > Expr() < SEMICOLON >  {    if (isArray)    {      m_codeGen.emit1(Opcode.IASTORE);    }    else    {      m_codeGen.emit2(Opcode.ISTORE, symbol.adr);    }  }}void CallStat() :{}{  Call() < SEMICOLON >}void Call() :{}{  < IDENT > < LEFTBRACKET > [ ActParList() ] < RIGHTBRACKET >}void ActParList() :{}{  Expr()  (    < COLON > Expr()  )*}void IfStat() :{  //Codegenerierung: Sprünge und Marken 54
  Label endifLabel = null;  Descriptor desc = null;}{  < IF > < LEFTBRACKET > desc = Expr()  {    m_codeGen.falseJump(desc);    m_codeGen.markByLabel(desc.m_tLabel);  }  < RIGHTBRACKET > Stat() < ELSE >  {    endifLabel = m_codeGen.createLabel();    m_codeGen.jump(endifLabel);    m_codeGen.markByLabel(desc.m_fLabel);  }  Stat()  {    m_codeGen.markByLabel(endifLabel);  }| /*no else*/  {    m_codeGen.markByLabel(desc.m_fLabel);  }  // [ //LOOKAHEAD(2) /*Vorrausschauen (Vorschlag war 2)*/
  //< ELSE >   //Stat() ]}void WhileStat() :{}{  < WHILE > < LEFTBRACKET > Expr() < RIGHTBRACKET > Stat()}void ReturnStat() :{}{  < RETURN > Expr() < SEMICOLON >}void Expr() :{}{  OrExpr()}void OrExpr() :{}{  AndExpr()  (    < OR > AndExpr()  )*}void AndExpr() :{}{  RelExpr()  (    < AND > RelExpr()  )*}void RelExpr() :{}{  SimpleExpr() [ Compare() SimpleExpr()  //[(< EQUALS >|<  NQ >| < GT >|< GET >|< LT >|< LET > )SimpleExpr()]
  ]}void SimpleExpr() :{}{  [    < PLUS >  | < MINUS >  ]  Term()  (    (      < PLUS >    | < MINUS >    )    Term()  )*}void Term() :{}{  NotFact()  (    (      < MULTIPLY >    | < DIVIDE >    )    NotFact()  )*}void NotFact() :{}{  [ < NOT > ] Fact()}void Fact() :{}{  < CONSTANT >| < IDENT >  [    < LEFTBRACKET > [ ActParList() ] < RIGHTBRACKET >  ]| < LEFTBRACKET > Expr() < RIGHTBRACKET >}void Compare() :{}{  < EQUALS >| < NQ >| < LT >| < LET >| < GT >| < GET >}void Init() :{}{  < ASSIGN > < CONSTANT >}void FuncHead() :{}{  Type() < IDENT > < LEFTBRACKET > [ FormParList() ] < RIGHTBRACKET >}void FormParList() :{}{  formPar()  (    < COLON > formPar()  )*}void formPar() : /*musste aufgeteilt werden, sonst gabs fehler*/{}{  [ < BYREF > ] Type() < IDENT >}void sum() :{}{  Term()  (    (      < PLUS >    | < MINUS >    )    Term()  )*}
