/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. JUSTGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(JUSTParser)package grammar;import grammar.symbol.*;import grammar.codegen.*;public class JUSTParser/*@bgen(jjtree)*/implements JUSTParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTJUSTParserState jjtree = new JJTJUSTParserState();

/*@egen*/  private static SymbolTable m_symboltable = new SymbolTable(); //Semantikanschluss Seite 41
  private static CodeGenerator m_codeGen = new CodeGenerator();  public static void main(String args [])  {    System.out.println("Reading from standard input...");    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");    new JUSTParser(System.in);    try    {      SimpleNode n = JUSTParser.Start();      n.dump("");      System.out.println("Thank you.");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(JUSTParser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* OPERATORS */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >| < ASSIGN : "=" >| < EQUALS : "==" >| < NQ : "!=" > /*Not Equals*/| < GT : ">" > /*Greater than*/| < GET : ">=" > /*Greater than or equal*/| < LT : "<" > /*Lesser than*/| < LET : "<=" > /*Lesser than or equal*/| < NOT : "!" >| < OR : "||" >| < AND : "&&" >}TOKEN : /*punctuation character*/{  < LEFTBRACKET : "(" >| < RIGHTBRACKET : ")" >| < LEFTCURLYBRACKET : "{" >| < RIGHTTCURLYBRACKET : "}" >| < LEFTSQUAREBRACKET : "[" >| < RIGHTSQUAREBRACKET : "]" >| < COLON : "," >| < SEMICOLON : ";" >}TOKEN [ IGNORE_CASE ] : /*keywords*/{  < PROGRAM : "program" >| < VOID : "void" >| < INT : "int" >| < BOOL : "boolean" >| < BYREF : "byref" >| < RETURN : "return" >| < IF : "if" >| < ELSE : "else" >| < WHILE : "while" >}TOKEN [ IGNORE_CASE ] :{  < #DIGIT : [ "0"-"9" ] >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < CONSTANT : (< DIGIT >)+ >| < IDENT :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >}TOKEN :{  < TrueValue : "true" >| < FalseValue : "false" >}SimpleNode Start() :{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/  CompilationUnit()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ /*Startpunkt f\u00fcr die Kompilierung*/  {    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}int one_line() :{/*@bgen(jjtree) one_line */
  SimpleNode jjtn000 = new SimpleNode(JJTONE_LINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) one_line */
  try {
/*@egen*/  CompilationUnit()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ /*Startpunkt f\u00fcr die Kompilierung*/  {    return 0;  }| ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return 1;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}/*Ab hier einfach die Regeln aus den Folien Abschreiben:
CompilationUnit ="program" ident "{" Definition "}".
Definition={ VarDef| FuncDef}.
VarDef=Type ident[ Init] ";".
Init="=" number.
Type="void" | "int" | "boolean".
FuncDef=FuncHeadBlock.
FuncHead=Type ident "(" [ FormParList] ")".
FormParList=["byref"] Type ident{"," ["byref"] Type ident}.
Block="{" { VarDef| Stat} "}".
Stat=AssignStat| CallStat| IfStat| WhileStat| ReturnStat| Block | ";".


AssignStat=ident "=" Expr";".
CallStat=Call ";".
Call=ident "(" [ ActParList] ")".
ActParList=Expr{ "," Expr}.
IfStat="if" "(" Expr ")" Stat [ "else" Stat ].
WhileStat="while" "(" Expr")" Stat.
ReturnStat="return" [ Expr] ";" .
Expr=OrExpr.
OrExpr=AndExpr{ "||" AndExpr}.
AndExpr=RelExpr{ "&&" RelExpr}.
RelExpr=SimpleExpr[ ("==" | "!=" | "<" | "<=" | ">" | ">=") SimpleExpr].
SimpleExpr=["+" | "-"] Term { ("+" | "-") Term }.
Term=NotFact{ ("*" | "/") NotFact}.
NotFact=["!"] Fact.
Fact=number| ident["(" [ ActParList] ")" ]| "(" Expr")".*/void CompilationUnit() :{/*@bgen(jjtree) CompilationUnit */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CompilationUnit */
  try {
/*@egen*/  < PROGRAM > < IDENT > < LEFTCURLYBRACKET > Definition() < RIGHTTCURLYBRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Definition() :{/*@bgen(jjtree) Definition */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Definition */
  try {
/*@egen*/  (    LOOKAHEAD(3) /*vorrausschauen 3 ist vorschlag von cc*/    VarDef()  | FuncDef()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void VarDef() :{/*@bgen(jjtree) VarDef */
  SimpleNode jjtn000 = new SimpleNode(JJTVARDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) VarDef */
  try {
/*@egen*/  Type() < IDENT > [ Init() ] < SEMICOLON >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FuncDef() :{/*@bgen(jjtree) FuncDef */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FuncDef */
  try {
/*@egen*/  FuncHead() Block()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Type() :{/*@bgen(jjtree) Type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Type */
  try {
/*@egen*/  < VOID >| < INT >| < BOOL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Block() :{/*@bgen(jjtree) Block */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Block */
  try {
/*@egen*/  < LEFTCURLYBRACKET >  (    VarDef()  | Stat()  )//*//not sure if ok, brings error with *  < RIGHTTCURLYBRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Stat() :{/*@bgen(jjtree) Stat */
  SimpleNode jjtn000 = new SimpleNode(JJTSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Stat */
  try {
/*@egen*/  LOOKAHEAD(2) /*vorraussschauen (Vorschlag war 2)*/  AssignStat()| CallStat()| IfStat()| WhileStat()| ReturnStat()| Block()| < SEMICOLON >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AssignStat() :{/*@bgen(jjtree) AssignStat */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  //Seite 41
  //Attribute  Token token;  boolean isArray = false;  Symbol symbol;}{/*@bgen(jjtree) AssignStat */
  try {
/*@egen*/  token = < IDENT >  {    //Semantische Aktionen (41) und Codegenerierung (51)    symbol = m_symboltable.lookup(token.image); //symbol.kind = Arg | Local | Field
    Descriptor desc = m_codeGen.newDescriptor(symbol); //desc.kind = Arg | Local | Field
    m_codeGen.load(desc); //desc.kind = Stack  }  [    {      isArray = true;      m_codeGen.emit2(Opcode.ALOAD, symbol.adr);    }    "[" Expr() "]"  ]  < ASSIGN > Expr() < SEMICOLON >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    if (isArray)    {      m_codeGen.emit1(Opcode.IASTORE);    }    else    {      m_codeGen.emit2(Opcode.ISTORE, symbol.adr);    }  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void CallStat() :{/*@bgen(jjtree) CallStat */
  SimpleNode jjtn000 = new SimpleNode(JJTCALLSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CallStat */
  try {
/*@egen*/  Call() < SEMICOLON >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Call() :{/*@bgen(jjtree) Call */
  SimpleNode jjtn000 = new SimpleNode(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Call */
  try {
/*@egen*/  < IDENT > < LEFTBRACKET > [ ActParList() ] < RIGHTBRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ActParList() :{/*@bgen(jjtree) ActParList */
  SimpleNode jjtn000 = new SimpleNode(JJTACTPARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ActParList */
  try {
/*@egen*/  Expr()  (    < COLON > Expr()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void IfStat() :{/*@bgen(jjtree) IfStat */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  //Codegenerierung: Spr\u00fcnge und Marken 54
  Label endifLabel = null;  Descriptor desc = null;}{/*@bgen(jjtree) IfStat */
  try {
/*@egen*/  < IF > < LEFTBRACKET > desc = Expr()  {    m_codeGen.falseJump(desc);    m_codeGen.markByLabel(desc.m_tLabel);  }  < RIGHTBRACKET > Stat() < ELSE >  {    endifLabel = m_codeGen.createLabel();    m_codeGen.jump(endifLabel);    m_codeGen.markByLabel(desc.m_fLabel);  }  Stat()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    m_codeGen.markByLabel(endifLabel);  }|/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ /*no else*/  {    m_codeGen.markByLabel(desc.m_fLabel);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  // [ //LOOKAHEAD(2) /*Vorrausschauen (Vorschlag war 2)*/
  //< ELSE >   //Stat() ]}void WhileStat() :{/*@bgen(jjtree) WhileStat */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) WhileStat */
  try {
/*@egen*/  < WHILE > < LEFTBRACKET > Expr() < RIGHTBRACKET > Stat()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void ReturnStat() :{/*@bgen(jjtree) ReturnStat */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURNSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ReturnStat */
  try {
/*@egen*/  < RETURN > Expr() < SEMICOLON >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Expr() :{/*@bgen(jjtree) Expr */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Expr */
  try {
/*@egen*/  OrExpr()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void OrExpr() :{/*@bgen(jjtree) OrExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OrExpr */
  try {
/*@egen*/  AndExpr()  (    < OR > AndExpr()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void AndExpr() :{/*@bgen(jjtree) AndExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AndExpr */
  try {
/*@egen*/  RelExpr()  (    < AND > RelExpr()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void RelExpr() :{/*@bgen(jjtree) RelExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTRELEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) RelExpr */
  try {
/*@egen*/  SimpleExpr() [ Compare() SimpleExpr()  //[(< EQUALS >|<  NQ >| < GT >|< GET >|< LT >|< LET > )SimpleExpr()]
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void SimpleExpr() :{/*@bgen(jjtree) SimpleExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTSIMPLEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SimpleExpr */
  try {
/*@egen*/  [    < PLUS >  | < MINUS >  ]  Term()  (    (      < PLUS >    | < MINUS >    )    Term()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Term() :{/*@bgen(jjtree) Term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Term */
  try {
/*@egen*/  NotFact()  (    (      < MULTIPLY >    | < DIVIDE >    )    NotFact()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void NotFact() :{/*@bgen(jjtree) NotFact */
  SimpleNode jjtn000 = new SimpleNode(JJTNOTFACT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NotFact */
  try {
/*@egen*/  [ < NOT > ] Fact()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Fact() :{/*@bgen(jjtree) Fact */
  SimpleNode jjtn000 = new SimpleNode(JJTFACT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Fact */
  try {
/*@egen*/  < CONSTANT >| < IDENT >  [    < LEFTBRACKET > [ ActParList() ] < RIGHTBRACKET >  ]| < LEFTBRACKET > Expr() < RIGHTBRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Compare() :{/*@bgen(jjtree) Compare */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPARE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Compare */
  try {
/*@egen*/  < EQUALS >| < NQ >| < LT >| < LET >| < GT >| < GET >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void Init() :{/*@bgen(jjtree) Init */
  SimpleNode jjtn000 = new SimpleNode(JJTINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Init */
  try {
/*@egen*/  < ASSIGN > < CONSTANT >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FuncHead() :{/*@bgen(jjtree) FuncHead */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FuncHead */
  try {
/*@egen*/  Type() < IDENT > < LEFTBRACKET > [ FormParList() ] < RIGHTBRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void FormParList() :{/*@bgen(jjtree) FormParList */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMPARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FormParList */
  try {
/*@egen*/  formPar()  (    < COLON > formPar()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void formPar() : /*musste aufgeteilt werden, sonst gabs fehler*/{/*@bgen(jjtree) formPar */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMPAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) formPar */
  try {
/*@egen*/  [ < BYREF > ] Type() < IDENT >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void sum() :{/*@bgen(jjtree) sum */
  SimpleNode jjtn000 = new SimpleNode(JJTSUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) sum */
  try {
/*@egen*/  Term()  (    (      < PLUS >    | < MINUS >    )    Term()  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
