/* Generated By:JavaCC: Do not edit this line. JUSTParserConstants.java */
package justcc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JUSTParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 5;
  /** RegularExpression Id. */
  int MINUS = 6;
  /** RegularExpression Id. */
  int MULTIPLY = 7;
  /** RegularExpression Id. */
  int DIVIDE = 8;
  /** RegularExpression Id. */
  int ASSIGN = 9;
  /** RegularExpression Id. */
  int EQUALS = 10;
  /** RegularExpression Id. */
  int NQ = 11;
  /** RegularExpression Id. */
  int GT = 12;
  /** RegularExpression Id. */
  int GET = 13;
  /** RegularExpression Id. */
  int LT = 14;
  /** RegularExpression Id. */
  int LET = 15;
  /** RegularExpression Id. */
  int NOT = 16;
  /** RegularExpression Id. */
  int OR = 17;
  /** RegularExpression Id. */
  int AND = 18;
  /** RegularExpression Id. */
  int LEFTBRACKET = 19;
  /** RegularExpression Id. */
  int RIGHTBRACKET = 20;
  /** RegularExpression Id. */
  int LEFTCURLYBRACKET = 21;
  /** RegularExpression Id. */
  int RIGHTTCURLYBRACKET = 22;
  /** RegularExpression Id. */
  int LEFTSQUAREBRACKET = 23;
  /** RegularExpression Id. */
  int RIGHTSQUAREBRACKET = 24;
  /** RegularExpression Id. */
  int COLON = 25;
  /** RegularExpression Id. */
  int SEMICOLON = 26;
  /** RegularExpression Id. */
  int POINT = 27;
  /** RegularExpression Id. */
  int PROGRAM = 28;
  /** RegularExpression Id. */
  int VOID = 29;
  /** RegularExpression Id. */
  int INT = 30;
  /** RegularExpression Id. */
  int BOOL = 31;
  /** RegularExpression Id. */
  int BYREF = 32;
  /** RegularExpression Id. */
  int RETURN = 33;
  /** RegularExpression Id. */
  int IF = 34;
  /** RegularExpression Id. */
  int ELSE = 35;
  /** RegularExpression Id. */
  int WHILE = 36;
  /** RegularExpression Id. */
  int VAR = 37;
  /** RegularExpression Id. */
  int CALL = 38;
  /** RegularExpression Id. */
  int COROUTINE = 39;
  /** RegularExpression Id. */
  int NEW = 40;
  /** RegularExpression Id. */
  int DIGIT = 41;
  /** RegularExpression Id. */
  int LETTER = 42;
  /** RegularExpression Id. */
  int CONSTANT = 43;
  /** RegularExpression Id. */
  int IDENT = 44;
  /** RegularExpression Id. */
  int TRUE = 45;
  /** RegularExpression Id. */
  int FALSE = 46;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"!\"",
    "\"||\"",
    "\"&&\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\";\"",
    "\".\"",
    "\"program\"",
    "\"void\"",
    "\"int\"",
    "\"boolean\"",
    "\"byref\"",
    "\"return\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"var\"",
    "\"call\"",
    "\"coroutine\"",
    "\"new\"",
    "<DIGIT>",
    "<LETTER>",
    "<CONSTANT>",
    "<IDENT>",
    "\"true\"",
    "\"false\"",
  };

}
