/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. JUSTGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.6";
  LOOKAHEAD = 3;
  static = true;
}

PARSER_BEGIN(JUST)
package javacc;
import javacc.tools.*;

public class JUST/*@bgen(jjtree)*/implements JUSTTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTJUSTState jjtree = new JJTJUSTState();

/*@egen*/

  private static SymbolTable m_symbolTable = new SymbolTable();
  
  public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    new JUST(System.in);
    try
    {
      SimpleNode n = JUST.Start();
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}
PARSER_END(JUST)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? 
    >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}


TOKEN :
{
  < Number : < INTEGER_LITERAL > >
  | < PROGRAM : "program" >
  | < VoidType : "void" >
  | < IntType : "int" >
  | < BooleanType : "boolean" >
  | < byref : "byref" >
  | < If : "if" >
  | < Else : "else" >
  | < While : "while" >
  | < Return : "return" >
}

TOKEN :
{
  < TrueValue : "true" >
| < FalseValue : "false" >

}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < DIGIT : [ "0"-"9" ] > 
}

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  CompilationUnit()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CompilationUnit() :
{/*@bgen(jjtree) CompilationUnit */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompilationUnit */
   try {
/*@egen*/
   < PROGRAM > < IDENTIFIER > "{" Definition() "}"/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
     m_symbolTable.leaveScope();
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Definition() :
{/*@bgen(jjtree) Definition */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Definition */
  try {
/*@egen*/
  ( LOOKAHEAD(VarDef()) VarDef() | FuncDef() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VarDef() :
{/*@bgen(jjtree) VarDef */
  SimpleNode jjtn000 = new SimpleNode(JJTVARDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token token;
  Type type;
  Symbol symbol;
  Symbol initSymbol;
}
{/*@bgen(jjtree) VarDef */
   try {
/*@egen*/
   type = Type() token = < IDENTIFIER > 
   {
     symbol = m_symbolTable.insert(token.image, type, Symbol.Kind.varKind);
   }
   (
     initSymbol = Init()
     {
       symbol.init = true;
       symbol.val = initSymbol.val;
     }
   )? ";"/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

Symbol Init() :
{/*@bgen(jjtree) Init */
  SimpleNode jjtn000 = new SimpleNode(JJTINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Symbol symbol = new Symbol();
  Token token;
}
{/*@bgen(jjtree) Init */
  try {
/*@egen*/
  "=" (
    < TrueValue >
    {
      symbol.val = 1;
    }
    | < FalseValue >
    {
      symbol.val = 0;
    }
    | token = < INTEGER_LITERAL >
    {
      symbol.val = Integer.valueOf(token.image);
    }
   )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
     return symbol;
   }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Type Type() :
{/*@bgen(jjtree) Type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
  try {
/*@egen*/
  < VoidType >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return Type.voidType;
  }
  | < IntType >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return Type.intType;
  }
  | < BooleanType >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return Type.booleanType;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FuncDef() :
{/*@bgen(jjtree) FuncDef */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCDEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FuncDef */
  try {
/*@egen*/
  FuncHead() Block(false)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FuncHead() :
{/*@bgen(jjtree) FuncHead */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token token;
  Type type;
  Symbol parListSymbol;
}
{/*@bgen(jjtree) FuncHead */
  try {
/*@egen*/
  type = Type() token = < IDENTIFIER >
  "("
  		{
    		m_symbolTable.enterScope();
  		}
   		(parListSymbol = FormParList())+
   ")"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    StringBuilder name = new StringBuilder(token.image);
    Symbol s = parListSymbol;
    while (s != null) {
      name.append("_").append(s.type.name);
      s = s.next;
    }
    s = m_symbolTable.insert(name.toString(), type, Symbol.Kind.funcKind);
    s.defined = true;
    s.symbols = parListSymbol;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Symbol FormParList() :
{/*@bgen(jjtree) FormParList */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMPARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Symbol symbol;
  Symbol last;
  Type type;
  Token token;
}
{/*@bgen(jjtree) FormParList */
  try {
/*@egen*/
  (< byref >)? type = Type() token = < IDENTIFIER >
  {
    last = symbol = m_symbolTable.insert(token.image, type, Symbol.Kind.parKind);
    symbol.init = true;
    /* TODO: byref / byvalue */
  }
   (
     "," (< byref >)? type = Type() token = < IDENTIFIER >
	  {
	    Symbol s = m_symbolTable.insert(token.image, type, Symbol.Kind.parKind);
	    s.init = true;
	    /* TODO: byref / byvalue */

		last.next = s;
		last = s;
	  }
    )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
     return symbol;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Block(boolean openScope) :
{/*@bgen(jjtree) Block */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
  try {
/*@egen*/
  {
    if (openScope) {
	    m_symbolTable.enterScope();
    }
  }
  "{" (VarDef() | Stat())* "}"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    m_symbolTable.leaveScope();
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Stat() :
{/*@bgen(jjtree) Stat */
  SimpleNode jjtn000 = new SimpleNode(JJTSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stat */
  try {
/*@egen*/
  LOOKAHEAD(AssignStat()) AssignStat() | CallStat() | IfStat() | WhileStat() | ReturnStat() | Block(true) | ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AssignStat() :
{/*@bgen(jjtree) AssignStat */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token token;
  boolean isArray = false;
  Symbol symbol;
}
{/*@bgen(jjtree) AssignStat */
  try {
/*@egen*/
  token = < IDENTIFIER >
  { symbol = m_symbolTable.lookup(token.image); }

  	[
		{
			isArray = true;
			// m_codeGen.emit2(Opcode.ALOAD, symbol.adr);
		}
		"[" Expr() "]"
	]

	"=" Expr() ";"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		if (isArray) {
			// m_codeGen.emit1(Opcode.IASTORE);
		} else {
			// m_codeGen.emit2(Opcode.ISTORE, symbol.adr);
		}
	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CallStat() :
{/*@bgen(jjtree) CallStat */
  SimpleNode jjtn000 = new SimpleNode(JJTCALLSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CallStat */
  try {
/*@egen*/
  Call() ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Call() :
{/*@bgen(jjtree) Call */
  SimpleNode jjtn000 = new SimpleNode(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token token;
  Symbol params = null;
  Symbol symbol;
}
{/*@bgen(jjtree) Call */
  try {
/*@egen*/
  token = < IDENTIFIER > "(" ( params = ActParList())? ")"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    StringBuilder name = new StringBuilder(token.image);
    Symbol s = params;
    while (s != null) {
      name.append("_").append(s.type.name);
      // TODO: mark for fixup if symbol is global undeclared variable
      s = s.next;
    }
    symbol = m_symbolTable.lookup(name.toString());
    symbol.symbols = params;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Symbol ActParList() :
{/*@bgen(jjtree) ActParList */
  SimpleNode jjtn000 = new SimpleNode(JJTACTPARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Symbol symbol;
  Symbol current;
  Symbol last;
}
{/*@bgen(jjtree) ActParList */
  try {
/*@egen*/
  symbol = Expr()
  {
    last = symbol;
  }
  (
    "," current = Expr()
    {
      last.next = current;
      last = current;
    }
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return symbol;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IfStat() :
{/*@bgen(jjtree) IfStat */
  SimpleNode jjtn000 = new SimpleNode(JJTIFSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStat */
  try {
/*@egen*/
  < If > "(" Expr() ")" Stat() (< Else > Stat())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WhileStat() :
{/*@bgen(jjtree) WhileStat */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILESTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileStat */
  try {
/*@egen*/
  < While > "(" Expr() ")" Block(true)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ReturnStat() :
{/*@bgen(jjtree) ReturnStat */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURNSTAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnStat */
  try {
/*@egen*/
  < Return > (Expr())? ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Symbol Expr() :
{/*@bgen(jjtree) Expr */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Symbol symbol;
}
{/*@bgen(jjtree) Expr */
   try {
/*@egen*/
   symbol = OrExpr()/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
     return symbol;
   }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

Symbol OrExpr() :
{/*@bgen(jjtree) OrExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Symbol symbolLeft;
  Symbol symbolRight;
}
{/*@bgen(jjtree) OrExpr */
  try {
/*@egen*/
  symbolLeft = AndExpr() (
    "||" symbolRight = AndExpr()
    {
		if (symbolRight != null && symbolLeft.type != symbolRight.type) {
  			throw new ParseException();
		}
		Symbol symbol = new Symbol();
		symbol.type = Type.booleanType;
		return symbol;
  	}
    )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      return symbolLeft;
    }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Symbol AndExpr() :
{/*@bgen(jjtree) AndExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Symbol symbolLeft;
  Symbol symbolRight;
}
{/*@bgen(jjtree) AndExpr */
  try {
/*@egen*/
  symbolLeft = RelExpr()
  ( "&&" symbolRight = RelExpr()
  	{
		if (symbolRight != null && symbolLeft.type != symbolRight.type) {
  			throw new ParseException();
		}
		Symbol symbol = new Symbol();
		symbol.type = Type.booleanType;
		return symbol;
  	}
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return symbolLeft;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Symbol RelExpr() :
{/*@bgen(jjtree) RelExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTRELEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Symbol symbolLeft;
  Symbol symbolRight;
}
{/*@bgen(jjtree) RelExpr */
  try {
/*@egen*/
  symbolLeft = SimpleExpr() (
    (
      "==" | "!=" | "<" | "<=" | ">" | ">=") symbolRight = SimpleExpr()
      	{
    		if (symbolRight != null && symbolLeft.type != symbolRight.type) {
      			throw new ParseException();
    		}
    		Symbol symbol = new Symbol();
    		symbol.type = Type.booleanType;
    		return symbol;
  		}
   	)?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return symbolLeft;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Symbol SimpleExpr() :
{/*@bgen(jjtree) SimpleExpr */
  SimpleNode jjtn000 = new SimpleNode(JJTSIMPLEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Symbol symbol;
}
{/*@bgen(jjtree) SimpleExpr */
  try {
/*@egen*/
  ("+" | "-")? symbol = Term() ( ("+" | "-") symbol = Term() )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return symbol;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Symbol Term() :
{/*@bgen(jjtree) Term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Symbol symbol;
}
{/*@bgen(jjtree) Term */
  try {
/*@egen*/
  symbol = NotFact() ( ( "*" | "/") symbol = NotFact() )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return symbol;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Symbol NotFact() :
{/*@bgen(jjtree) NotFact */
  SimpleNode jjtn000 = new SimpleNode(JJTNOTFACT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Symbol symbol;
  boolean isNot = false;
}
{/*@bgen(jjtree) NotFact */
  try {
/*@egen*/
  ("!"
  {
    isNot = true;
  })? symbol = Fact()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (isNot && symbol.type.kind != Type.Kind.booleanKind)
    {
     throw new ParseException();
    }
    
    return symbol;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Symbol Fact() :
{/*@bgen(jjtree) Fact */
  SimpleNode jjtn000 = new SimpleNode(JJTFACT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token token;
  Symbol symbol;
}
{/*@bgen(jjtree) Fact */
  try {
/*@egen*/
  < FalseValue >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    symbol = new Symbol();
    symbol.kind = Symbol.Kind.constKind;
    symbol.type = Type.booleanType;
    symbol.val = 0;
    symbol.init = true;
    return symbol;
  }
    
  | < TrueValue >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    symbol = new Symbol();
    symbol.kind = Symbol.Kind.constKind;
    symbol.type = Type.booleanType;
    symbol.val = 1;
    symbol.init = true;
    return symbol;
  }
  | token = < INTEGER_LITERAL >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    symbol = new Symbol();
    symbol.kind = Symbol.Kind.constKind;
    symbol.type = Type.intType;
    symbol.val = Integer.valueOf(token.image);
    return symbol;
	}

    
  | token = < IDENTIFIER > ("(" (ActParList())? ")" )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return m_symbolTable.lookup(token.image);
  }
  | "(" symbol = Expr() ")"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
 	return symbol;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}